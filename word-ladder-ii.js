/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {string[][]}
 */

var findLadders = function (beginWord, endWord, wordList) {
  const tree = {
    value: beginWord,
    children: [],
    parent: null,
    path: [beginWord],
  };
  let finish = false;
  const paths = [];
  const visitedWords = [];

  if (wordList.indexOf(endWord) < 0) return paths;
  const buildChildren = (rootWord) => {
    wordList.forEach((word) => {
      if (word !== endWord && visitedWords.indexOf(word) >= 0) return;

      if (rootWord.path.length > wordList) return (finish = true);
      let sameLetters = 0;

      word.split("").forEach((character, index) => {
        if (character === rootWord.value.charAt(index)) sameLetters++;
      });

      if (sameLetters === beginWord.length - 1) {
        const childToPush = {
          value: word,
          parent: rootWord.value,
          children: [],
          path: rootWord.path ? [...rootWord.path, word] : word,
        };
        rootWord.children.push(childToPush);
        visitedWords.push(word);
        if (word === endWord) {
          finish = true;
          paths.push(childToPush.path);
        }
      }
    });
  };

  const buildSiblings = (rootWord) => {
    if (rootWord.children.length) {
      const siblings = rootWord.children.map((child) => child.value);
      rootWord.children.forEach((child) => {
        child.siblings = siblings;
      });
    }
  };

  const queue = [tree];
  while (queue.length) {
    // if (finish) break;
    buildChildren(queue[0]);
    buildSiblings(queue[0]);
    if (!finish) queue[0].children.forEach((child) => queue.push(child));
    queue.shift();
  }

  if (!paths.length) return [];
  const minDistance = paths[0].length;
  const shortestPaths = [];

  let dfsVisitedWords = [];

  const buildChildrenDFS = (node) => {
    let childrenAdded = 0;

    wordList.forEach((word) => {
      if (node.path.length >= minDistance) {
        return;
      }
      if (dfsVisitedWords.indexOf(word) > 0) return;
      if (node.path.indexOf(word) >= 0) return;
      let sameLetters = 0;

      word.split("").forEach((character, index) => {
        if (character === node.value.charAt(index)) sameLetters++;
      });

      if (sameLetters === beginWord.length - 1) {
        const childToPush = {
          value: word,
          parent: node.value,
          children: [],
          path: node.path ? [...node.path, word] : word,
        };
        node.children.push(childToPush);
        childrenAdded++;
        if (word === endWord) {
          shortestPaths.push(childToPush.path);
        }
        dfsVisitedWords.push(word);
      }
    });
    // If no children can be added, this branch is dead.
    if (childrenAdded === 0) {
      const a = treeDFS;
      dfsVisitedWords.splice(dfsVisitedWords.indexOf(node.value), 1);
    }
  };

  const treeDFS = {
    value: beginWord,
    children: [],
    parent: null,
    path: [beginWord],
  };

  let node = treeDFS;
  dfsVisitedWords.push(node.value);

  const DFS = (node) => {
    const a = treeDFS;
    buildChildrenDFS(node);
    if (node.children.length > 0)
      node.children.forEach((child) => {
        DFS(child);
      });
  };

  DFS(node);

  // Now we need to find the shortest ways down
  //

  return shortestPaths;
};

console.log(
  findLadders("cet", "ism", [
    "kid",
    "tag",
    "pup",
    "ail",
    "tun",
    "woo",
    "erg",
    "luz",
    "brr",
    "gay",
    "sip",
    "kay",
    "per",
    "val",
    "mes",
    "ohs",
    "now",
    "boa",
    "cet",
    "pal",
    "bar",
    "die",
    "war",
    "hay",
    "eco",
    "pub",
    "lob",
    "rue",
    "fry",
    "lit",
    "rex",
    "jan",
    "cot",
    "bid",
    "ali",
    "pay",
    "col",
    "gum",
    "ger",
    "row",
    "won",
    "dan",
    "rum",
    "fad",
    "tut",
    "sag",
    "yip",
    "sui",
    "ark",
    "has",
    "zip",
    "fez",
    "own",
    "ump",
    "dis",
    "ads",
    "max",
    "jaw",
    "out",
    "btu",
    "ana",
    "gap",
    "cry",
    "led",
    "abe",
    "box",
    "ore",
    "pig",
    "fie",
    "toy",
    "fat",
    "cal",
    "lie",
    "noh",
    "sew",
    "ono",
    "tam",
    "flu",
    "mgm",
    "ply",
    "awe",
    "pry",
    "tit",
    "tie",
    "yet",
    "too",
    "tax",
    "jim",
    "san",
    "pan",
    "map",
    "ski",
    "ova",
    "wed",
    "non",
    "wac",
    "nut",
    "why",
    "bye",
    "lye",
    "oct",
    "old",
    "fin",
    "feb",
    "chi",
    "sap",
    "owl",
    "log",
    "tod",
    "dot",
    "bow",
    "fob",
    "for",
    "joe",
    "ivy",
    "fan",
    "age",
    "fax",
    "hip",
    "jib",
    "mel",
    "hus",
    "sob",
    "ifs",
    "tab",
    "ara",
    "dab",
    "jag",
    "jar",
    "arm",
    "lot",
    "tom",
    "sax",
    "tex",
    "yum",
    "pei",
    "wen",
    "wry",
    "ire",
    "irk",
    "far",
    "mew",
    "wit",
    "doe",
    "gas",
    "rte",
    "ian",
    "pot",
    "ask",
    "wag",
    "hag",
    "amy",
    "nag",
    "ron",
    "soy",
    "gin",
    "don",
    "tug",
    "fay",
    "vic",
    "boo",
    "nam",
    "ave",
    "buy",
    "sop",
    "but",
    "orb",
    "fen",
    "paw",
    "his",
    "sub",
    "bob",
    "yea",
    "oft",
    "inn",
    "rod",
    "yam",
    "pew",
    "web",
    "hod",
    "hun",
    "gyp",
    "wei",
    "wis",
    "rob",
    "gad",
    "pie",
    "mon",
    "dog",
    "bib",
    "rub",
    "ere",
    "dig",
    "era",
    "cat",
    "fox",
    "bee",
    "mod",
    "day",
    "apr",
    "vie",
    "nev",
    "jam",
    "pam",
    "new",
    "aye",
    "ani",
    "and",
    "ibm",
    "yap",
    "can",
    "pyx",
    "tar",
    "kin",
    "fog",
    "hum",
    "pip",
    "cup",
    "dye",
    "lyx",
    "jog",
    "nun",
    "par",
    "wan",
    "fey",
    "bus",
    "oak",
    "bad",
    "ats",
    "set",
    "qom",
    "vat",
    "eat",
    "pus",
    "rev",
    "axe",
    "ion",
    "six",
    "ila",
    "lao",
    "mom",
    "mas",
    "pro",
    "few",
    "opt",
    "poe",
    "art",
    "ash",
    "oar",
    "cap",
    "lop",
    "may",
    "shy",
    "rid",
    "bat",
    "sum",
    "rim",
    "fee",
    "bmw",
    "sky",
    "maj",
    "hue",
    "thy",
    "ava",
    "rap",
    "den",
    "fla",
    "auk",
    "cox",
    "ibo",
    "hey",
    "saw",
    "vim",
    "sec",
    "ltd",
    "you",
    "its",
    "tat",
    "dew",
    "eva",
    "tog",
    "ram",
    "let",
    "see",
    "zit",
    "maw",
    "nix",
    "ate",
    "gig",
    "rep",
    "owe",
    "ind",
    "hog",
    "eve",
    "sam",
    "zoo",
    "any",
    "dow",
    "cod",
    "bed",
    "vet",
    "ham",
    "sis",
    "hex",
    "via",
    "fir",
    "nod",
    "mao",
    "aug",
    "mum",
    "hoe",
    "bah",
    "hal",
    "keg",
    "hew",
    "zed",
    "tow",
    "gog",
    "ass",
    "dem",
    "who",
    "bet",
    "gos",
    "son",
    "ear",
    "spy",
    "kit",
    "boy",
    "due",
    "sen",
    "oaf",
    "mix",
    "hep",
    "fur",
    "ada",
    "bin",
    "nil",
    "mia",
    "ewe",
    "hit",
    "fix",
    "sad",
    "rib",
    "eye",
    "hop",
    "haw",
    "wax",
    "mid",
    "tad",
    "ken",
    "wad",
    "rye",
    "pap",
    "bog",
    "gut",
    "ito",
    "woe",
    "our",
    "ado",
    "sin",
    "mad",
    "ray",
    "hon",
    "roy",
    "dip",
    "hen",
    "iva",
    "lug",
    "asp",
    "hui",
    "yak",
    "bay",
    "poi",
    "yep",
    "bun",
    "try",
    "lad",
    "elm",
    "nat",
    "wyo",
    "gym",
    "dug",
    "toe",
    "dee",
    "wig",
    "sly",
    "rip",
    "geo",
    "cog",
    "pas",
    "zen",
    "odd",
    "nan",
    "lay",
    "pod",
    "fit",
    "hem",
    "joy",
    "bum",
    "rio",
    "yon",
    "dec",
    "leg",
    "put",
    "sue",
    "dim",
    "pet",
    "yaw",
    "nub",
    "bit",
    "bur",
    "sid",
    "sun",
    "oil",
    "red",
    "doc",
    "moe",
    "caw",
    "eel",
    "dix",
    "cub",
    "end",
    "gem",
    "off",
    "yew",
    "hug",
    "pop",
    "tub",
    "sgt",
    "lid",
    "pun",
    "ton",
    "sol",
    "din",
    "yup",
    "jab",
    "pea",
    "bug",
    "gag",
    "mil",
    "jig",
    "hub",
    "low",
    "did",
    "tin",
    "get",
    "gte",
    "sox",
    "lei",
    "mig",
    "fig",
    "lon",
    "use",
    "ban",
    "flo",
    "nov",
    "jut",
    "bag",
    "mir",
    "sty",
    "lap",
    "two",
    "ins",
    "con",
    "ant",
    "net",
    "tux",
    "ode",
    "stu",
    "mug",
    "cad",
    "nap",
    "gun",
    "fop",
    "tot",
    "sow",
    "sal",
    "sic",
    "ted",
    "wot",
    "del",
    "imp",
    "cob",
    "way",
    "ann",
    "tan",
    "mci",
    "job",
    "wet",
    "ism",
    "err",
    "him",
    "all",
    "pad",
    "hah",
    "hie",
    "aim",
    "ike",
    "jed",
    "ego",
    "mac",
    "baa",
    "min",
    "com",
    "ill",
    "was",
    "cab",
    "ago",
    "ina",
    "big",
    "ilk",
    "gal",
    "tap",
    "duh",
    "ola",
    "ran",
    "lab",
    "top",
    "gob",
    "hot",
    "ora",
    "tia",
    "kip",
    "han",
    "met",
    "hut",
    "she",
    "sac",
    "fed",
    "goo",
    "tee",
    "ell",
    "not",
    "act",
    "gil",
    "rut",
    "ala",
    "ape",
    "rig",
    "cid",
    "god",
    "duo",
    "lin",
    "aid",
    "gel",
    "awl",
    "lag",
    "elf",
    "liz",
    "ref",
    "aha",
    "fib",
    "oho",
    "tho",
    "her",
    "nor",
    "ace",
    "adz",
    "fun",
    "ned",
    "coo",
    "win",
    "tao",
    "coy",
    "van",
    "man",
    "pit",
    "guy",
    "foe",
    "hid",
    "mai",
    "sup",
    "jay",
    "hob",
    "mow",
    "jot",
    "are",
    "pol",
    "arc",
    "lax",
    "aft",
    "alb",
    "len",
    "air",
    "pug",
    "pox",
    "vow",
    "got",
    "meg",
    "zoe",
    "amp",
    "ale",
    "bud",
    "gee",
    "pin",
    "dun",
    "pat",
    "ten",
    "mob",
  ])
);
